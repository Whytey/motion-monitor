#!/usr/bin/env python
'''
Created on 24/07/2013

@author: djwhyte
'''
import argparse
import asyncio
import logging
import logging.handlers
import os
import motionmonitor.core
import motionmonitor.config


def __setup_logger():
    log_filename = "motion-monitor.log"

    logger = logging.getLogger()
    logger.setLevel(logging.getLevelName("DEBUG"))

    # Determine the path to the log file.
    log_path = os.path.join(os.sep, 'var', 'log', 'motion-monitor')
    if __is_running_in_dev():
        # We are working in a development environment
        log_path = os.path.join(os.sep, 'tmp', 'motion-monitor')

    if not os.path.exists(log_path):
        os.makedirs(log_path)

    logger_path = os.path.join(log_path, log_filename)

    # Add the log message handler to the logger (10MBs in size).
    file_handler = logging.handlers.RotatingFileHandler(
        logger_path, maxBytes=10485760, backupCount=7)
    logging.handlers.RotatingFileHandler.doRollover(file_handler)

    console_handler = logging.StreamHandler()

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

    return logger


def __parse_args():
    parser = argparse.ArgumentParser(description='Run the motion-monitor server.')
    parser.add_argument('-c', "--config", type=str, dest='config_file',
                        help='The config file to read at startup.')

    args = parser.parse_args()
    return args


def __is_running_in_dev():
    return os.path.exists(os.path.join(os.getcwd(), 'setup.py'))


if __name__ == '__main__':
    args = __parse_args()

    logger = __setup_logger()
    logger.debug("Logger configured")

    config_file = None
    config = motionmonitor.config.ConfigReader().read_config(args.config_file)

    loop = asyncio.get_event_loop()
    mm = motionmonitor.core.MotionMonitor(config, loop)

    loop.run_until_complete(mm.run())

    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass

    loop.close()
