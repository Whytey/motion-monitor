#!/usr/bin/env python
'''
Created on 24/07/2013

@author: djwhyte
'''
from gi.repository import GObject
import logging
import logging.handlers
import monitor.cameramonitor
import monitor.filemanager
import monitor.jsoninterface
import monitor.socketlistener
import monitor.sqlexchanger
import monitor.zabbixwriter
import os

class MainApp():
    
    def __init__(self):

        # We are in development if the setup.py script is in the same directory 
        # we are running from.
        self.__in_development = os.path.exists(os.path.join(os.getcwd(), 'setup.py'))
        
        self.__logger = self.__setup_logger()
        self.__logger.debug("Logger configured")
        
        self.__socket_listener = monitor.socketlistener.SocketListener()
        self.__camera_monitor = monitor.cameramonitor.CameraMonitor()
        self.__zabbixwriter = monitor.zabbixwriter.ZabbixWriter()
        self.__live_sqlwriter = monitor.sqlexchanger.SQLWriter(monitor.sqlexchanger.DB().getConnection())
        
        # SocketListener MOTION_EVENTs should be handled by the CameraMonitor.
        self.__socket_listener.connect(self.__socket_listener.MOTION_EVENT, 
                                       self.__camera_monitor.handle_motion_event)
        
        # SocketListener MOTION_EVENTs should be handled by the SQLWriter.
        self.__socket_listener.connect(self.__socket_listener.MOTION_EVENT, 
                                       self.__live_sqlwriter.handle_motion_event)
        
        # CameraMonitor ACTIVITY_EVENTs are handled by the ZabbixWriter.
        self.__camera_monitor.connect(self.__camera_monitor.ACTIVITY_EVENT, 
                                      self.__zabbixwriter.handle_camera_activity)
        
        
        # This is the sweeper and auditor.
        self.__sweeper_sqlwriter = monitor.sqlexchanger.SQLWriter(monitor.sqlexchanger.DB().getConnection())
        self.__sweeper = monitor.filemanager.Sweeper(self.__sweeper_sqlwriter)
        self.__auditor_sqlwriter = monitor.sqlexchanger.SQLWriter(monitor.sqlexchanger.DB().getConnection())
        self.__auditor = monitor.filemanager.Auditor(self.__auditor_sqlwriter)
        # SocketListener MANAGEMENT_EVENTs should be handled by the Sweeper.
        self.__socket_listener.connect(self.__socket_listener.MANAGEMENT_EVENT, 
                                       self.__sweeper.sweep)
        
        # SocketListener MANAGEMENT_EVENTs should be handled by the Auditor.
        self.__socket_listener.connect(self.__socket_listener.MANAGEMENT_EVENT, 
                                       self.__auditor.insert_orphaned_snapshots)
        
        self.__json_interface = monitor.jsoninterface.JSONInterface(self.__camera_monitor)
        
        self.__logger.info("Initialised...")

        
    def __setup_logger(self):
        log_filename = 'motion-monitor.log'
        
        logger = logging.getLogger('monitor')
        logger.setLevel(logging.DEBUG)

        # Determine the path to the log file.
        log_path = os.path.join(os.sep, 'var', 'log', 'motion-monitor')
        if self.__in_development:
            # We are working in a development environment
            log_path = os.path.join(os.sep, 'tmp', 'motion-monitor')
            
        if not os.path.exists(log_path):
            os.makedirs(log_path)
        
        logger_path = os.path.join(log_path, log_filename)
        
        # Add the log message handler to the logger (10MBs in size).
        file_handler = logging.handlers.RotatingFileHandler(
                       logger_path, maxBytes=10485760, backupCount=7)
        file_handler.setLevel(logging.DEBUG)
        
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.DEBUG)
        
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        file_handler.setFormatter(formatter)
        console_handler.setFormatter(formatter)
        
        logger.addHandler(file_handler)
        logger.addHandler(console_handler)
        
        return logger

if __name__ == '__main__':
    MainApp()
    loop = GObject.MainLoop()
    loop.run()
